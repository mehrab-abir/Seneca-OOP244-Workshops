This workshop was about modularizing the source code of a C project. There are multiple functions used in this C project that serve different purposes. Based on the work each function does, we place them in different mudules. A module is consists of two files, one source (.c/.cpp) file and one header (.h) file. The header file contains the function prototype or declarations and the source file contains the implementation of those functions. There are mainly 3 modules in this workshop, movie, file and utils. The 'movie' module contains all functions related to implemention of searching or displaying movies in the output terminal, the 'file' module contains all functions that do the job of opening, closing or reading the file that contains movie information. The other one, 'utils' module contains all other miscelleneous functions that are needed to maintain the overall output. Modules enable us to resue our functions in multiple source files. For example, in main.cpp, we include movie and utils modules, in the movie.cpp, movie and utils module included again. If we do not mudularize them, we would have to write the same code in all source files. Keeping functions in different modules helps organize the code and reuse the function as we need. I learned how to keep our functions in different modules and use them in different source files through doing this workshop. 